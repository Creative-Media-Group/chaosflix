plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
    id 'com.github.triplet.play' version '2.6.2'
}
android.buildFeatures.buildConfig true
String appName = "Chaosflix"
String versionString = new File("versionfile").text.trim()

android {
    buildToolsVersion '35.0.0'
    compileSdk 35
    defaultConfig {
        applicationId "de.nicidienase.chaosflix"
        manifestPlaceholders = [label: appName]
        minSdkVersion rootProject.ext.minSDK
        targetSdkVersion rootProject.ext.targetSDK
        // odd for touch, even for leanback
        versionCode 1
        versionName versionString
        if(project.hasProperty("versionCode")){
            versionCode = project.property("versionCode") as int
            println "Setting VersionCode from property: $versionCode"
        }
    }
    signingConfigs {
        //noinspection GroovyMissingReturnStatement, GroovyAssignabilityCheck
        release {
            if (project.hasProperty("chaosflixKeystore") && file(chaosflixKeystore).exists() && file(chaosflixKeystore).isFile()) {
                println "Release app signing is configured: will sign APK"
                storeFile file(chaosflixKeystore)
                storePassword chaosflixStorePassword
                keyAlias chaosflixKeyName
                keyPassword chaosflixKeyPassword
            } else {
                println "App signing data not found. Will not sign."
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [label: appName + "-debug"]
            minifyEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),'proguard-rules.pro'
            if (project.hasProperty("chaosflixKeystore") && file(chaosflixKeystore).exists() && file(chaosflixKeystore).isFile()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "stage", "libs"

    productFlavors {
        prod {
            dimension "stage"
        }
        dev {
            dimension "stage"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [label: appName + "-Dev"]
        }
        mock {
            dimension "stage"
            applicationIdSuffix ".mock"
            manifestPlaceholders = [label: appName + "-Mock"]
        }
        free {
            dimension "libs"
        }
        noFree{
            dimension "libs"
        }
    }
    variantFilter { variant ->
        def names = variant.flavors*.name
        if (name.contains("prod") && name.contains("Debug")){
            setIgnore(true)
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/ASL2.0', 'META-INF/LICENSE', 'META-INF/license.txt', 'META-INF/NOTICE', 'META-INF/notice.txt']
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig.testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    dataBinding.enabled = true
    playConfigs {
        prodNoFree {
            enabled = true
        }
    }
    ndkVersion '28.0.13004108'
    lint {
        abortOnError false
    }
}

configurations {
    mockDebugCompile
    prodDebugCompile
    prodReleaseCompile
}


dependencies {
    implementation project(':common')
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.12.0'

    implementation 'androidx.leanback:leanback:1.2.0'
    implementation 'androidx.leanback:leanback-preference:1.2.0'

    implementation "androidx.legacy:legacy-preference-v14:1.0.0"
    implementation "androidx.tvprovider:tvprovider:1.0.0"

    implementation 'com.google.android.exoplayer:extension-leanback:2.19.1'
    androidTestImplementation('androidx.test:rules:1.6.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('androidx.test.ext:junit:1.2.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.3.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:3.0'
    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
}

play {
    serviceAccountCredentials = file("../chaosflix-d1d09f33cbb2.json")
    track = "Alpha"
    enabled = false
}

