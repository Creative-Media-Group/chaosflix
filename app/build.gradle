apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

String appName = "Chaosflix"
String versionString = new File("versionfile").text.trim()

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "de.nicidienase.chaosflix"
        minSdkVersion rootProject.ext.minSDK
        targetSdkVersion rootProject.ext.targetSDK
        manifestPlaceholders = [label: appName]
        // odd for touch, even for leanback
        versionCode 1
        versionName versionString

        if(project.hasProperty("versionCode")){
            versionCode = project.property("versionCode") as int
            println "Setting VersionCode from property: $versionCode"
        }
        if(project.hasProperty("versionName")){
            versionName = project.property("versionName") as String
            println "Setting versionName from property: $versionName"
        }
    }


    signingConfigs {
        //noinspection GroovyMissingReturnStatement, GroovyAssignabilityCheck
        release {
            if (project.hasProperty("chaosflixKeystore") && file(chaosflixKeystore.trim()).exists() && file(chaosflixKeystore.trim()).isFile()) {
                println "Release app signing is configured: will sign APK"
                storeFile file(chaosflixKeystore.trim())
                storePassword chaosflixStorePassword.trim()
                keyAlias chaosflixKeyName.trim()
                keyPassword chaosflixKeyPassword.trim()
            } else {
                println "App signing data not found. Will not sign."
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            manifestPlaceholders = [label: appName + "-debug"]
            minifyEnabled false
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
            if (project.hasProperty("chaosflixKeystore") && file(chaosflixKeystore.trim()).exists() && file(chaosflixKeystore.trim()).isFile()) {
                signingConfig signingConfigs.release
            }
        }
    }

    flavorDimensions "stage", "libs"

    productFlavors {
        prod {
            dimension "stage"
        }
        dev {
            dimension "stage"
            applicationIdSuffix ".dev"
            manifestPlaceholders = [label: appName + "-Dev"]
        }
        mock {
            dimension "stage"
            applicationIdSuffix ".mock"
            manifestPlaceholders = [label: appName + "-Mock"]
        }
        free {
            dimension "libs"
        }
        noFree {
            dimension "libs"
        }
    }

}

configurations {
    mockDebugCompile
    prodDebugCompile
    prodReleaseCompile
}

dependencies {
    implementation project(':touch')
    implementation project(':leanback')
}
